#!/usr/bin/python
# -*- coding: utf-8 -*-

####
# Project Lorena
# A Mame (mamedev.org) frontend.
#
# Copyright Â© 2012 Lorena Project Team
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation; version 2 only.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
####

import sys
import os
import subprocess
from PyQt4 import QtCore, QtGui, uic
from PyQt4.phonon import Phonon
import sqlite3 as lite
from xml.etree import cElementTree as ET
import xml.dom.minidom
import multiprocessing
import resources
import settings
import string
import platform


# Check Operation System
sysos = platform.system()
if sysos == "Linux" or "linux2":
    # Set path for sdlame or mame
    mamebin = os.popen("which sdlmame").read()
    if not mamebin:
	mamebin = os.popen("which mame").read()
    CONFIG_DIR  = os.path.expanduser("~/.lorena/")
    if not os.path.isdir(CONFIG_DIR):
        os.makedirs(CONFIG_DIR)
    CONFIG_FILE = os.path.join(CONFIG_DIR, "lorena.conf")
    CONFS = []
    ROM = ""
elif sysos == "darwin":
   namebin = '/usr/bin/sdlmame'
elif sysos == "win32":
   mamebin = 'c:\mame.exe'
else:
    print 'Unknown Operation system'
    sys.exit(1)

class ProgressBarWindow(QtGui.QDialog):
    def __init__(self, existDb, title, text, statusBar, tblGames, graphicsView, videoPlayer, parent=None):
        QtGui.QDialog.__init__(self, parent)
        self.existDb = existDb
        self.setWindowTitle(title)
        self.setWindowModality(QtCore.Qt.WindowModal)
        self.progressbar = QtGui.QProgressBar()
        self.lblText = QtGui.QLabel(text)
        self.lblStatus = QtGui.QLabel("Loading game list, please wait...")
        self.lblStatus.setMinimumSize(240,16)
        self.pgIcon = QtGui.QLabel()
        self.pgIcon.setPixmap(QtGui.QPixmap("ui/pixmaps/mameicon.png"))
        self.btnAbort = QtGui.QPushButton("Abort")
        self.btnAbort.setAutoDefault(False)
        buttonBox = QtGui.QDialogButtonBox()
        buttonBox.addButton(self.btnAbort, QtGui.QDialogButtonBox.RejectRole)
        pgLayout = QtGui.QGridLayout()
        pgLayout.addWidget(self.pgIcon, 0, 0)
        pgLayout.addWidget(self.lblText, 0, 1)
        pgLayout.addWidget(self.progressbar, 1, 1)
        pgLayout.addWidget(self.lblStatus, 3, 1)
        pgLayout.addWidget(buttonBox, 4, 1)
        self.setLayout(pgLayout)
        self.btnAbort.clicked.connect(self.dialogClose)
        self.show()
        scene = self.buildGamelist(statusBar, tblGames, graphicsView, videoPlayer)
        return scene

    def buildGamelist(self, statusBar, tblGames, graphicsView, videoPlayer):
        self.item = 0
        col = 0
        lin = 0
        tableline = 0
        self.videoPlayer = videoPlayer
        self.tblGames = tblGames
        self.dialogClosed = False
        if not self.existDb:
            dataBase().createDb()
        total = Mame().mameExec("-ll | wc -l")
        self.progressbar.setMinimum(1)
        self.progressbar.setMaximum(int(total))

        scene = QtGui.QGraphicsScene()
        tblGames.setColumnCount(7)
        tblGames.setHorizontalHeaderLabels(["Game", "Name", "Year", "Manufacturer", "Last Played", "Play Count", "Rating"])
        hitem = QtGui.QTableWidgetItem("Game")
        hitem.setTextAlignment(QtCore.Qt.AlignLeft)
        tblGames.setHorizontalHeaderItem(0, hitem)
        hitem = QtGui.QTableWidgetItem("Name")
        hitem.setTextAlignment(QtCore.Qt.AlignLeft)
        tblGames.setHorizontalHeaderItem(1, hitem)
        hitem = QtGui.QTableWidgetItem("Manufacturer")
        hitem.setTextAlignment(QtCore.Qt.AlignLeft)
        tblGames.setHorizontalHeaderItem(3, hitem)

        tblGames.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        tblGames.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
        tblGames.setRowCount(int(total) - 1)
        db = dataBase()
        db.open()
        db.startTransaction()
        for xmlresult in Mame().getGameList():
            self.item += 1
            self.progressbar.setValue(self.item)
            self.lblStatus.setText("Updating: " + xmlresult[4][:20] + "...")
            if self.dialogClosed:
                break
            QtCore.QCoreApplication.processEvents()

            if os.path.isfile(CONFS[11] + "/" + xmlresult[0] + ".zip"):
                gamestatus = True
            else:
                gamestatus = False

            if not self.existDb:
                sql = """INSERT INTO game (name, sourcefile, cloneof, romof, description, year, manufacturer, picture, video, playcount, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
                db.insert(sql, [xmlresult[0], xmlresult[1], xmlresult[2], xmlresult[3], xmlresult[4], xmlresult[5], xmlresult[6], xmlresult[0] + ".png", xmlresult[0] + ".mng", 0, gamestatus])

            #gamestdout = Mame().mameExec("-verifyroms", xmlresult[0])
            #errcheck = gamestdout.find("is good") >= 0
            #if errcheck:

            tblItem = QtGui.QTableWidgetItem(tableline)
            if gamestatus:
                tblItem.setIcon(QtGui.QIcon(QtGui.QPixmap("ui/pixmaps/ok.png")))
                tblItem.setText(str(xmlresult[4]))
            else:
                tblItem.setIcon(QtGui.QIcon(QtGui.QPixmap("ui/pixmaps/error.png")))
                tblItem.setText(str(xmlresult[4]))
            tblItem.setTextAlignment(QtCore.Qt.AlignLeft)
            tblGames.setItem(tableline, 0, tblItem)
            tblItem = QtGui.QTableWidgetItem(str(xmlresult[0]))
            tblItem.setTextAlignment(QtCore.Qt.AlignLeft)
            tblGames.setItem(tableline, 1, tblItem)
            tblItem = QtGui.QTableWidgetItem(str(xmlresult[5]))
            tblItem.setTextAlignment(QtCore.Qt.AlignHCenter)
            tblGames.setItem(tableline, 2, tblItem)
            tblItem = QtGui.QTableWidgetItem(str(repr(xmlresult[6]))[1:-1])
            tblItem.setTextAlignment(QtCore.Qt.AlignLeft)
            tblGames.setItem(tableline, 3, tblItem)
            tblItem = QtGui.QTableWidgetItem("")
            tblItem.setTextAlignment(QtCore.Qt.AlignHCenter)
            tblGames.setItem(tableline, 4, tblItem)
            tblItem = QtGui.QTableWidgetItem("0")
            tblItem.setTextAlignment(QtCore.Qt.AlignHCenter)
            tblGames.setItem(tableline, 5, tblItem)
            tblItem = QtGui.QTableWidgetItem("")
            tblItem.setTextAlignment(QtCore.Qt.AlignHCenter)
            tblGames.setItem(tableline, 6, tblItem)


            tableline += 1

            if gamestatus:
                self.rom = str(xmlresult[0])
                self.name = str(xmlresult[4])
                gamepicture = xmlresult[0] + ".png"
                picture = CONFS[12] + "/" + gamepicture
                if not os.path.isfile(picture):
                    picture = "ui/pixmaps/nopic.png"
                spicture = QtGui.QPixmap(picture).scaled(238, 174, QtCore.Qt.IgnoreAspectRatio)
                color = QtGui.QColor(0, 0, 0, 0)
                pix = QtGui.QPixmap(QtCore.QSize(238, 174))
                pix.fill(color)
                rect = QtCore.QRectF(0.0, 0.0, 238, 174)
                painter = QtGui.QPainter()
                painter.begin(pix)
                painter.setRenderHints(QtGui.QPainter.Antialiasing, True)
                path = QtGui.QPainterPath()
                path.addRoundedRect(rect, 8.0, 8.0)
                painter.drawPath(path)
                brush = QtGui.QBrush()
                brush.setTexture(QtGui.QPixmap(spicture))
                painter.fillPath(path, brush)
                painter.end()
                pixItem = GameItem(self, self.item, self.rom, self.name, pix, None, scene, self.videoPlayer, self.tblGames)
                pixItem.setPos((260 * col + 20), lin + 20)
                col += 1
                if col >= 6:
                    lin += 230
                    col = 0

        tblGames.itemClicked.connect(self.gameItemSelect)
        tblGames.resizeColumnsToContents()

        graphicsView.setViewportMargins(20,20,20,20)
        graphicsView.setScene(scene)
        graphicsView.setAlignment(QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft)

        db.commit()
        db.close()
        self.close()

    def gameItemSelect(self):
        TableRow(self.item, self.rom, self.videoPlayer, self.tblGames)

    def dialogClose(self):
        self.close
        QtCore.QCoreApplication.processEvents()
        self.dialogClosed = True

class Init(QtGui.QMainWindow):
    def __init__(self):
        super(Init, self).__init__()
        self.initUI()

    def initUI(self):
        global CONFS
        CONFS = self.readConf(CONFIG_FILE)

        uic.loadUi(os.path.join(os.getcwd(), "ui/lory.ui"), self)
        if not os.path.isfile('lory.db'):
            QtGui.QMessageBox.about(self, "Lorena", "Lorena needs to update the game database from MAME.\n\nThis process may take a few minutes to complete.")
            existDb = False
        else:
            existDb = True

        self.videoPlayer = Phonon.VideoPlayer()
        self.videoPlayer.setMaximumSize(QtCore.QSize(288, 288))
        self.verticalLayout.addWidget(self.videoPlayer)

        pgbarWindow = ProgressBarWindow(existDb, "Lorena", "Generating Mame game list...", self.statusBar, self.tblGames, self.graphicsView, self.videoPlayer)

        self.show()

        Mame().populateLibrary(self.trLibraries)

        self.actionFullScreen.triggered.connect(self.fullScreen)
        self.actionListView.triggered.connect(self.checkTabView)
        self.actionScreenView.triggered.connect(self.checkScreenView)
        self.actionPreferences.triggered.connect(self.callPreferences)
        self.actionPlay.triggered.connect(self.playGame)
        self.actionAbout.triggered.connect(self.about)

    def fullScreen(self):
        if self.actionFullScreen.isChecked():
            CONFS[1] = True
        else:
            CONFS[1] = False

    def checkTabView(self):
        if self.actionListView.isChecked():
            self.tblGames.show()
        else:
            self.tblGames.hide()

    def checkScreenView(self):
        if self.actionScreenView.isChecked():
            self.graphicsView.show()
        else:
            self.graphicsView.hide()

    def callPreferences(self):
        ex = settings.UiSettings()

    def playGame(self):
        parameters = ""
        if CONFS[1] == "False":
            parameters += "-window "
        if int(CONFS[2]) > 0:
            parameters += "-scalemode " + CONFS[2] + " "
        if CONFS[3] == "True":
            parameters += "-autoframeskip "
        if int(CONFS[4]) > -1:
            parameters += "-frameskip " + CONFS[4] + " "
        if CONFS[5] == "True":
            parameters += "-throttle "
        if int(CONFS[5]) > -1:
            parameters += "-effect " + CONFS[5] + " "
        if not CONFS[8] == "True":
            parameters += "-skip_gameinfo "
        if CONFS[9] == "False":
            parameters += "-nojoystick,"
        if os.path.exists(os.path.expanduser(CONFS[11])):
            #os.path.isdir(CONFS[11]):
            parameters += "-rompath " + CONFS[11]

        parameters += " "
        if ROM == "":
            msgbox = QtGui.QMessageBox.warning(self, "Lorena", "There is no Game selected.\nPlease, select a game before to run.")
        else:
            mame = Mame()
            mame.mameExec(parameters + ROM)

    def readConf(self, xmlfile):
        xml = XMLSettings()
        try:
            self.nodeText = xml.parse(xmlfile)
            return xml.loadConf(xmlfile)
        except:
            msgbox = QtGui.QMessageBox.warning(self, "Lorena", "Configuration file %s does not exist.\n A new one will be created in: ~/.lorena/lorena.conf." % xmlfile)
            saveConf = settings.SetConf()
            saveConf.saveZeroConf()
            try:
                self.nodeText = xml.parse(xmlfile)
                return xml.loadConf(xmlfile)
            except:
                msgbox = QtGui.QMessageBox.warning(self, "Lorena", "Is not possible to load the configuration file: %s.\n Check if it exists or if is a valid XML file" % xmlfile)

    def about(self):
        QtGui.QMessageBox.information(self, self.tr("About Lorena"), self.tr("This Mame (mamedev.org) frontend."))

class XMLSettings():
    def nodeText(self, node):
        text = ""
        for child in node.childNodes:
            if child.nodeType is child.TEXT_NODE:
                text += child.data
            return text

    def parse(self, xmlfile):
        children_names = []
        x = xml.dom.minidom.parse(xmlfile)
        nodes = x.documentElement
        children1 = [node for node in nodes.childNodes if node.nodeType == x.ELEMENT_NODE]

        for father in children1:
            children2 = [node for node in father.childNodes if node.nodeType == x.ELEMENT_NODE]
            for child in children2:
                children_names.append(child.nodeName + ", " + self.nodeText(child))
        return (children_names)

    def loadConf(self, xmlfile):
        try:
            nodeText = self.parse(xmlfile)
            for child in nodeText:
                if child.split(",")[0] == "fullscreen":
                    fullscreen = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "scale":
                    scale = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "fsautomatic":
                    fsautomatic = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "fsmanual":
                    fsmanual = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "fseffect":
                    fseffect = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "hwspeed":
                    hwspeed = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "prspeed":
                    prspeed = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "gameinfo":
                    gameinfo = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "joystick":
                    joystick = string.strip(child.split(",")[1])
                elif child.split(",")[0] == "mamepath":
                    mamepath = string.strip(child.split(",")[1]).encode("utf8")
                elif child.split(",")[0] == "rompath":
                    rompath = string.strip(child.split(",")[1]).encode("utf8")
                elif child.split(",")[0] == "snappath":
                    snappath = string.strip(child.split(",")[1]).encode("utf8")
                elif child.split(",")[0] == "videopath":
                    videopath = string.strip(child.split(",")[1]).encode("utf8")
        except:
            return [False,"","","","","","","","","","","","",""]
        return [True, fullscreen, scale, fsautomatic, fsmanual, fseffect, hwspeed, prspeed, gameinfo, joystick, mamepath, rompath, snappath, videopath]

class Mame():
    def mameExec(self, parameter1, parameter2=None, parameter3=None):
        #mamebin = os.popen("/usr/bin/which mame").read()
        if not mamebin:
            msgbox = QtGui.QMessageBox.critical(QtGui.QWidget(), "Lorena", "Error on execute shell command.\n\nThere is no Mame binary file.\n")
            sys.exit(1)

        if parameter2 and parameter3:
            command = subprocess.Popen([mamebin.strip(), parameter1, parameter2, parameter3], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        elif parameter2 and not parameter3:
            command = subprocess.Popen([mamebin.strip(), parameter1, parameter2], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            command = subprocess.Popen(mamebin.strip() + " " + parameter1, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        (standardout, standarderr) = command.communicate()

        if standarderr:
            msgbox = QtGui.QMessageBox.critical(QtGui.QWidget(), "Lorena", "Error on execute Mame command.\n\n" + standarderr)
        return standardout

    def populateLibrary(self, trLibraries):
        # populate category
        trLibraries.clear()
        querylib = dataBase().queryLibrary()
        for l in querylib:
            item = QtGui.QTreeWidgetItem(trLibraries)
            item.setText(0, l[1])

    def getNodetext(self, elem,node_name,default_value=None):
        node = elem.find(node_name)
        if node == None:
            return default_value
        return node.text

    def xmlParse(self, xmllist):
        doc = ET.ElementTree(ET.fromstring(xmllist))
        game_nodes = doc.getroot().findall("game")
        for game_node in game_nodes:
            name = game_node.attrib.get("name",None)
            sourcefile = game_node.attrib.get("sourcefile",None)
            cloneof = game_node.attrib.get("cloneof",None)
            romof = game_node.attrib.get("romof",None)
            description = self.getNodetext(game_node,"description","")
            year = self.getNodetext(game_node,"year","")
            manufacturer = self.getNodetext(game_node,"manufacturer","")
            xmlresult = [name, sourcefile, cloneof, romof, description, year, manufacturer]
        return xmlresult

    def getGameList(self, params = ""):
        QtCore.QCoreApplication.processEvents()
        strxml_gamelist = self.mameExec("-lx", "-norc", params)
        xmldoc_gamelist = ET.ElementTree(ET.fromstring(strxml_gamelist))
        for game_node in xmldoc_gamelist.getroot().findall("game"):
            yield [game_node.attrib.get("name",None), game_node.attrib.get("sourcefile",None), game_node.attrib.get("cloneof",None), game_node.attrib.get("romof",None), self.getNodetext(game_node,"description",""), self.getNodetext(game_node,"year",""), self.getNodetext(game_node,"manufacturer","")]

class dataBase():
    def open(self):
        try:
            self.con = lite.connect("lory.db")

        except lite.Error, e:
            print "Error %s:" % e.args[0]
            sys.exit(1)

        return self.con

    def startTransaction(self):
        self.cur = self.con.cursor()

    def commit(self):
        self.con.commit()

    def rollback(self):
        self.con.rollback()

    def insert(self, sql, values):
        self.cur.execute(sql, values)

    def close(self):
        self.con.close()

    def createDb(self):
        con = self.open()
        with con:
            # Create a library of games table
            cur_libname = con.cursor()
            cur_libname.execute("CREATE TABLE libraryname (id INTEGER PRIMARY KEY ASC, name TEXT)")
            cur_libname.execute("INSERT INTO libraryname (name) VALUES ('Recently Played')")
            cur_libname.execute("INSERT INTO libraryname (name) VALUES ('Top Rated')")
            cur_libgame = con.cursor()
            cur_libgame.execute("CREATE TABLE library(id INTEGER PRIMARY KEY ASC, idgame INTEGER, idlibname INTEGER)")

            # Create a games list table
            cur_game = con.cursor()
            cur_game.execute("CREATE TABLE game (id INTEGER PRIMARY KEY ASC, name TEXT, sourcefile TEXT, cloneof TEXT, romof TEXT, description TEXT, year TEXT, manufacturer TEXT, picture TEXT, video TEXT, rating INTEGER, lastplayed DATE, playcount INTEGER, status INTEGER)")
            con.commit()
        self.close()

    def queryLibrary(self):
        # Generate a library
        con = self.open()
        cur_lib = con.cursor()
        cur_lib.execute("SELECT * FROM libraryname")
        data_lib = cur_lib.fetchall()
        self.close()
        return data_lib

    def queryGame(self):
        # Generate a games list
        con = self.dbConnection()
        cur_game = con.cursor()
        cur_game.execute("SELECT * FROM game ORDER BY 'description'")
        data_game = cur_game.fetchall()
        cur_game.execute("SELECT COUNT(*) FROM game")
        data_game_count = cur_game.fetchone()

        con.close()
        return data_game, data_game_count

class GameItem(QtGui.QGraphicsPixmapItem):
    def __init__(self, window, index, rom, name, img, parent=None, scene=None, videoPlayer=None, tblGames=None):
        super(GameItem, self).__init__(parent, scene)
        self.window = window
        self.idx = index
        self.setPixmap(QtGui.QPixmap(img))
        self.videoPlayer = videoPlayer
        self.setToolTip(name)
        self.name = name
        self.rom = rom
        self.video = rom + ".mp4"
        self.tblGames = tblGames

    def mousePressEvent(self, event):
        self.itemSelected()

    def itemSelected(self):
        global ROM
        ROM = self.rom
        url = QtCore.QUrl(CONFS[13] + "/" + self.video)
        mediaSource = Phonon.MediaSource(url)
        if self.videoPlayer.isPlaying():
            self.videoPlayer.stop()
            self.videoPlayer.play(mediaSource)
        else:
            self.videoPlayer.play(mediaSource)
        self.tblGames.selectRow(self.idx -1)


class TableRow(QtGui.QTableWidget):
    def __init__(self, index, rom, videoPlayer=None, tblGames=None, parent=None):
        super(TableRow, self).__init__(parent)
        video = rom + ".mp4"
        global ROM
        ROM = rom
        url = QtCore.QUrl(CONFS[13] + "/" + video)
        mediaSource = Phonon.MediaSource(url)
        if videoPlayer.isPlaying():
            videoPlayer.stop()
            videoPlayer.play(mediaSource)
        else:
            videoPlayer.play(mediaSource)


def main():
    app = QtGui.QApplication(sys.argv)
    app.setApplicationName("Lorena - Mame Frontend")
    ex = Init()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
